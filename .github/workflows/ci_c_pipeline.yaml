name: Deploy Microservices

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      aggregator_service:
        required: false
        type: boolean
    secrets:
      GCP_SA_KEY:
        required: true
      GCP_PROJECT_ID:
        required: true
      GKE_CLUSTER_NAME:
        required: true
      GKE_REGION:
        required: true
      DATABASE_USER:
        required: true
      DATABASE_PASSWORD:
        required: true
      DATABASE_ENDPOINT:
        required: true
      DATABASE_NAME:
        required: true
      # Additional secrets for aggregator service if needed:
      AGGREGATOR_DB_URL_1:
        required: false
      AGGREGATOR_DB_URL_2:
        required: false
      REDSHIFT_URL:
        required: false

jobs:
  deploy_services:
    runs-on: ubuntu-latest
    if: ${{ inputs.aggregator_service != 'true' }}
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      SERVICE: ${{ inputs.service_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: "latest"
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          skip_install: false

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure gcloud project
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      - name: Authenticate with GKE
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Create Kubernetes Secret for DATABASE_URL
        run: |
          kubectl create secret generic ${SERVICE}-db-secret \
            --from-literal=DATABASE_URL=postgresql://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_ENDPOINT }}:5432/${{ secrets.DATABASE_NAME }} || echo "Secret already exists"

      - name: Authenticate Docker with Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GKE_REGION }}-docker.pkg.dev

      - name: Build & Push Docker Image to GCP
        run: |
          docker build -t ${{ secrets.GKE_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/moon-insurance/$SERVICE:latest .
          docker push ${{ secrets.GKE_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/moon-insurance/$SERVICE:latest

      - name: Run Migration Job
        run: |
          kubectl apply -f k8s/migration-job.yaml
          kubectl wait --for=condition=complete job/${SERVICE}-migrations --timeout=120s || echo "Migration job failed"

      - name: Check for First Deployment (Initial Setup)
        id: check_deployment
        run: |
          if kubectl get deployment ${SERVICE}-blue; then
            echo "is_initial=false" >> $GITHUB_ENV
          else
            echo "is_initial=true" >> $GITHUB_ENV
          fi

      - name: Initial Blue Deployment
        if: env.is_initial == 'true'
        run: |
          kubectl apply -f k8s/deployment-blue.yaml
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment/${SERVICE}-blue

      - name: Deploy New Green Version
        if: env.is_initial == 'false'
        run: |
          kubectl apply -f k8s/deployment-green.yaml
          kubectl rollout status deployment/${SERVICE}-green --timeout=120s

      - name: Health Check Green Version with Rollback
        if: env.is_initial == 'false'
        run: |
          echo "Waiting for the new version to stabilize..."
          sleep 10
          LB_HOST=$(kubectl get svc $SERVICE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Load Balancer Host: $LB_HOST"
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://$LB_HOST)
          echo "Health Check Status: $STATUS"
          if [ "$STATUS" -ne 200 ]; then
            echo "Health check failed with status code $STATUS. Rolling back to blue..."
            kubectl patch service $SERVICE -p '{"spec":{"selector":{"version":"blue"}}}'
            kubectl rollout status deployment/${SERVICE}-blue
            exit 1
          fi

      - name: Switch Traffic to Green
        if: env.is_initial == 'false'
        run: |
          kubectl patch service $SERVICE -p '{"spec":{"selector":{"version":"green"}}}'
          echo "Traffic switched to green version."

      - name: Confirm Deployments for Rollback
        if: env.is_initial == 'false'
        run: |
          echo "Both blue and green deployments are available. In case of issues, you can revert by patching the service selector back to 'blue'."
