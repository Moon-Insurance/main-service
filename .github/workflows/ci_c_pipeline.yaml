name: Deploy Microservices

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      aggregator_service:
        required: false
        type: boolean
    secrets:
      GCP_SA_KEY:
        required: true
      GCP_PROJECT_ID:
        required: true
      GKE_CLUSTER_NAME:
        required: true
      GKE_REGION:
        required: true
      DATABASE_USER:
        required: true
      DATABASE_PASSWORD:
        required: true
      DATABASE_ENDPOINT:
        required: true
      DATABASE_NAME:
        required: true
      # Additional secrets for aggregator service if needed:
      AGGREGATOR_DB_URL_1:
        required: false
      AGGREGATOR_DB_URL_2:
        required: false
      REDSHIFT_URL:
        required: false

jobs:
  deploy_services:
    runs-on: ubuntu-latest
    if: ${{ inputs.aggregator_service != 'true' }}
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      SERVICE: ${{ inputs.service_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: "latest"
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          skip_install: false

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure gcloud project
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      - name: Authenticate with GKE
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Create Kubernetes Secret for DATABASE_URL
        run: |
          kubectl create secret generic ${SERVICE}-db-secret \
            --from-literal=DATABASE_URL=postgresql://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_ENDPOINT }}:5432/${{ secrets.DATABASE_NAME }} || echo "Secret already exists"

      - name: Authenticate Docker with Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GKE_REGION }}-docker.pkg.dev

      - name: Install Argo Rollouts CLI
        run: |
          curl -sSL -o /usr/local/bin/argo-rollouts https://github.com/argoproj/argo-rollouts/releases/download/v1.5.0/argo-rollouts-linux-amd64
          chmod +x /usr/local/bin/argo-rollouts

      - name: Install Argo Rollouts
        run: |
          kubectl apply -f https://github.com/argoproj/argo-rollouts/releases/download/v1.5.0/install.yaml

      - name: Build & Push Docker Image to GCP
        run: |
          docker build -t ${{ secrets.GKE_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/moon-insurance/$SERVICE:latest .
          docker push ${{ secrets.GKE_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/moon-insurance/$SERVICE:latest

      # Apply Rollout Configuration and Watch Status
      - name: Deploy Using Argo Rollouts
        run: |
          kubectl apply -f k8s/deployment.yaml
          argo-rollouts get rollout ${SERVICE} --watch

      # Approve Rollout Promotion
      - name: Approve Rollout Promotion
        run: |
          argo-rollouts promote ${SERVICE}
          echo "Green version promoted to production."

      # Verify Deployment Status
      - name: Verify Deployment Status
        run: |
          argo-rollouts get rollout ${SERVICE}
