name: Deploy Microservices

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      aggregator_service:
        required: false
        type: boolean
    secrets:
      GCP_SA_KEY:
        required: true
      GCP_PROJECT_ID:
        required: true
      GKE_CLUSTER_NAME:
        required: true
      GKE_REGION:
        required: true
      DATABASE_USER:
        required: true
      DATABASE_PASSWORD:
        required: true
      DATABASE_ENDPOINT:
        required: true
      DATABASE_NAME:
        required: true

jobs:
  deploy_services:
    runs-on: ubuntu-latest
    if: ${{ inputs.aggregator_service != 'true' }}
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      SERVICE: ${{ inputs.service_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: "latest"
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          skip_install: false # You can keep this as false if you want to install gcloud

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} # Use the service account key from GitHub Secrets

      - name: Configure gcloud project
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      - name: Authenticate with GKE
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install Dependencies & Run Unit Tests
        run: |
          echo "Service name is: $SERVICE"
          pip install -r requirements.txt
          pytest tests/unit-test.py --maxfail=1 --disable-warnings -q

      - name: Create Kubernetes Secret for DATABASE_URL
        run: |
          kubectl create secret generic ${SERVICE}-db-secret \
          --from-literal=DATABASE_URL=postgresql://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_ENDPOINT }}:5432/${{ secrets.DATABASE_NAME }} || echo "Secret already exists"

      - name: Create Kubernetes Secret for GCP Credentials
        run: |
          kubectl create secret generic gcp-secret \
            --from-literal=GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} \
            --from-literal=GCP_REGION=${{ secrets.GCP_REGION }} || echo "Secret already exists"

      - name: Run Migration Job
        run: |
          kubectl apply -f k8s/migration-job.yaml
          kubectl wait --for=condition=complete job/$SERVICE-migrations --timeout=120s || echo "Migration job failed"

      - name: Authenticate Docker with Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GKE_REGION }}-docker.pkg.dev

      - name: Build & Push Docker Image to GCP
        run: |
          docker build -t ${{ secrets.GKE_REGION }}-docker.pkg.dev/$GCP_PROJECT_ID/moon-insurance/$SERVICE:latest .
          docker push ${{ secrets.GKE_REGION }}-docker.pkg.dev/$GCP_PROJECT_ID/moon-insurance/$SERVICE:latest

      - name: Check for First Deployment (Initial Setup)
        id: first_deployment
        run: |
          if kubectl get deployment $SERVICE-blue; then
            echo "Blue deployment exists. Continuing with green update."
            echo "is_initial=false" >> $GITHUB_ENV
          else
            echo "Blue deployment does not exist. Initial deployment setup."
            echo "is_initial=true" >> $GITHUB_ENV
          fi

      - name: Deploy Blue (Initial Deployment)
        if: env.is_initial == 'true'
        run: |
          kubectl apply -f k8s/deployment-blue.yaml
          kubectl apply -f k8s/deployment-blue.yaml
          kubectl rollout status deployment/$SERVICE-blue

      - name: Rename Green to Blue (Before Deploying New Green)
        if: env.is_initial == 'false' # Only execute for updates, not the first deployment
        run: |
          if kubectl get deployment $SERVICE-green; then
            echo "Renaming Green to Blue..."
            kubectl delete service $SERVICE-blue || echo "No old blue service"
            kubectl delete deployment $SERVICE-blue || echo "No old blue deployment"
            kubectl patch deployment $SERVICE-green --type='json' \
              -p='[{"op": "replace", "path": "/metadata/name", "value": "'$SERVICE'-blue"}]'
          else
            echo "No existing Green deployment found. Skipping renaming step."
          fi

      - name: Deploy Green (New Version)
        run: |
          kubectl apply -f k8s/deployment-green.yaml
          kubectl apply -f k8s/service-green.yaml
          kubectl rollout status deployment/$SERVICE-green

      - name: Get Kubernetes Service URL
        run: |
          API_URL=$(kubectl get svc $SERVICE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "DEPLOYED_API_URL=$API_URL" >> $GITHUB_ENV

      - name: Switch Traffic to Green (Update Service Selector)
        run: |
          kubectl patch service $SERVICE \
            -p '{"spec":{"selector":{"version":"green"}}}'

      - name: (Optional) Delete Blue Deployment
        if: env.is_initial == 'false'
        run: |
          kubectl delete deployment $SERVICE-blue
          kubectl delete service $SERVICE-blue

  deploy_aggregator:
    runs-on: ubuntu-latest
    if: ${{ inputs.aggregator_service == 'true' }} # This job will only run if the aggregator service is specified
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: "latest"
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          skip_install: false # You can keep this as false if you want to install gcloud

      - name: Handle Aggregator Service
        run: |
          echo "Handling Aggregator Service Logic"
          # Set up multiple DB connections and Redshift configurations
          export AGGREGATOR_DB_URL_1=${{ secrets.AGGREGATOR_DB_URL_1 }}
          export AGGREGATOR_DB_URL_2=${{ secrets.AGGREGATOR_DB_URL_2 }}
          export REDSHIFT_URL=${{ secrets.REDSHIFT_URL }}
          echo "Aggregator service has access to multiple databases and Redshift"

      - name: Deploy Aggregator Service to GKE
        run: |
          kubectl apply -f aggregator_service/k8s/deployment.yaml
          kubectl rollout status deployment/aggregator-service-deployment
